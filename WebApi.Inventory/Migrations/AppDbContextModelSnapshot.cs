// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApi.Inventory;

#nullable disable

namespace WebApi.Inventory.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApi.Inventory.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4f1c872-5b6a-4d3f-9f73-7e8c9fda9009"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Ultrabook com tela 13.3”",
                            Manufacturer = "Dell",
                            Name = "Notebook Dell XPS 13",
                            Price = 8500.00m,
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("3a1f2c44-5f6d-4e5e-9b3f-21a7e8d1c001"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "128GB, Titânio",
                            Manufacturer = "Apple",
                            Name = "iPhone 15 Pro",
                            Price = 9999.99m,
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("7f4b8c36-9f1a-4b0a-9f92-1f0a3e6c2d55"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "34 polegadas, 144Hz",
                            Manufacturer = "LG",
                            Name = "Monitor LG UltraWide",
                            Price = 2499.50m,
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("WebApi.Inventory.Models.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.ToTable("StockItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b27a1e56-1c47-4e89-ae63-2b49cfa49003"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Depósito A",
                            ProductId = new Guid("d4f1c872-5b6a-4d3f-9f73-7e8c9fda9009"),
                            Quantity = 10,
                            StorageId = new Guid("c8e2f91a-6f2b-4c6e-81a1-6c3d8f7a9002"),
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("9e8f4c72-27a9-4e5d-9e33-5a4b6d8a4004"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Depósito A",
                            ProductId = new Guid("3a1f2c44-5f6d-4e5e-9b3f-21a7e8d1c001"),
                            Quantity = 5,
                            StorageId = new Guid("c8e2f91a-6f2b-4c6e-81a1-6c3d8f7a9002"),
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("5c3b7a18-7e61-41d2-8322-0f9d4cfa5005"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Depósito B",
                            ProductId = new Guid("7f4b8c36-9f1a-4b0a-9f92-1f0a3e6c2d55"),
                            Quantity = 20,
                            StorageId = new Guid("c8e2f91a-6f2b-4c6e-81a1-6c3d8f7a9002"),
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("WebApi.Inventory.Models.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Storages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8e2f91a-6f2b-4c6e-81a1-6c3d8f7a9002"),
                            CreatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2025, 8, 26, 14, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("WebApi.Inventory.Models.StockItem", b =>
                {
                    b.HasOne("WebApi.Inventory.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApi.Inventory.Models.Storage", "Storage")
                        .WithMany("Items")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("WebApi.Inventory.Models.Storage", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
